function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { forwardRef } from 'react';
import { StyledIcon } from '../StyledIcon';
var Memory = /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(StyledIcon, _extends({
    ref: ref,
    viewBox: "0 0 24 24",
    a11yTitle: "Memory"
  }, props), /*#__PURE__*/React.createElement("path", {
    d: "M7.5 5.27686C8.32843 5.27686 9 5.94843 9 6.77686V13.7769C9 14.6053 8.32843 15.2769 7.5 15.2769C6.67157 15.2769 6 14.6053 6 13.7769V6.77686C6 5.94843 6.67157 5.27686 7.5 5.27686Z",
    fill: "#000"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M12 5.27686C12.8284 5.27686 13.5 5.94843 13.5 6.77686V13.7769C13.5 14.6053 12.8284 15.2769 12 15.2769C11.1716 15.2769 10.5 14.6053 10.5 13.7769V6.77686C10.5 5.94843 11.1716 5.27686 12 5.27686Z",
    fill: "#000"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M16.5 5.27686C17.3284 5.27686 18 5.94843 18 6.77686V13.7769C18 14.6053 17.3284 15.2769 16.5 15.2769C15.6716 15.2769 15 14.6053 15 13.7769V6.77686C15 5.94843 15.6716 5.27686 16.5 5.27686Z",
    fill: "#000"
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20 1.27686C21.6569 1.27686 23 2.62 23 4.27686V7.27686C23 7.85723 22.7469 8.32426 22.4609 8.65771C22.2498 8.90384 22.0017 9.10212 21.7598 9.25732L21.5215 9.39893C21.2087 9.57013 21 9.89965 21 10.2769C21 10.6541 21.2087 10.9836 21.5215 11.1548L21.7598 11.2964C22.0017 11.4516 22.2498 11.6499 22.4609 11.896C22.7469 12.2294 23 12.6965 23 13.2769V21.2769C23 22.3814 22.1046 23.2769 21 23.2769H3C1.89543 23.2769 1 22.3814 1 21.2769V13.2769C1 12.6965 1.25309 12.2294 1.53906 11.896C1.82065 11.5677 2.16831 11.3246 2.47852 11.1548L2.59082 11.0835C2.84022 10.9005 3 10.6069 3 10.2769C3 9.94682 2.84022 9.65322 2.59082 9.47021L2.47852 9.39893C2.16831 9.22911 1.82065 8.986 1.53906 8.65771C1.25309 8.32426 1 7.85723 1 7.27686V4.27686C1 2.62 2.34315 1.27686 4 1.27686H20ZM3 21.2769H21V19.2769H3V21.2769ZM4 3.27686C3.44772 3.27686 3 3.72457 3 4.27686V7.26904C2.99805 7.25481 2.9927 7.2814 3.05664 7.35596C3.13339 7.44545 3.26527 7.54869 3.43945 7.64404L3.60938 7.74463C4.44369 8.27584 5 9.2108 5 10.2769C5 11.3429 4.44369 12.2779 3.60938 12.8091L3.43945 12.9097C3.26526 13.005 3.13339 13.1083 3.05664 13.1978C3.01603 13.2451 3.00354 13.2733 3 13.2837V17.2769H21V13.2837C20.9965 13.2733 20.984 13.2451 20.9434 13.1978C20.8858 13.1306 20.7976 13.0555 20.6836 12.9819L20.5605 12.9097C19.6327 12.4017 19 11.4138 19 10.2769C19 9.13994 19.6327 8.15206 20.5605 7.64404L20.6836 7.57178C20.7976 7.49824 20.8858 7.42306 20.9434 7.35596C21.0073 7.2814 21.002 7.25481 21 7.26904V4.27686C21 3.72457 20.5523 3.27686 20 3.27686H4Z",
    fill: "#000"
  }));
});
Memory.displayName = 'Memory';
export { Memory };